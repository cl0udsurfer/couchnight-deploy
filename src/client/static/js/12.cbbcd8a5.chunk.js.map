{"version":3,"sources":["lib/hooks/useScrollToTop.js","sections/Host/Host.style.js","sections/Host/index.js"],"names":["useScrollToTop","useLayoutEffect","window","scrollTo","FormContent","styled","div","Content","Text","Title","Item","beforeImageUpload","file","fileIsValidImage","type","fileIsValidSize","size","displayErrorMessage","WrappedHost","create","name","form","viewer","useContext","AuthContext","useState","imageLoading","setImageLoading","imageBase64Value","setImageBase64Value","useMutation","HOST_LISTING","onCompleted","displaySuccessNotification","onError","hostListing","loading","data","id","hasWallet","className","level","to","message","getFieldDecorator","layout","onSubmit","evt","preventDefault","validateFields","err","values","fullAddress","address","city","state","postalCode","input","image","price","variables","label","rules","required","min","placeholder","extra","maxLength","TextArea","rows","listType","showUploadList","action","beforeUpload","onChange","info","status","originFileObj","img","callback","reader","FileReader","readAsDataURL","onload","result","getBase64Value","src","alt","Group","Button","value","htmlType"],"mappings":"mGAAA,WAQeA,IANQ,WACrBC,2BAAgB,WACdC,OAAOC,SAAS,EAAG,KAClB,M,itBCHE,IAAMC,EAAcC,IAAOC,IAAV,K,GAaED,IAAOC,IAAV,KAIQD,IAAOC,IAAV,K,iCCEpBC,E,IAAAA,QACAC,E,IAAAA,KAAMC,E,IAAAA,MACNC,E,IAAAA,KAsVFC,EAAoB,SAACC,GACzB,IAAMC,EACU,eAAdD,EAAKE,MAAuC,cAAdF,EAAKE,KAC/BC,EAAkBH,EAAKI,KAAO,KAAO,KAAO,EAElD,OAAKH,EAKAE,EAOEF,GAAoBE,GANzBE,YACE,uEAEK,IARPA,YAAoB,uDACb,IAaLC,EAAc,IAAKC,OAAO,CAC9BC,KAAM,aADY,EAxWP,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACdrB,cADyB,IAGjBsB,EAAWC,qBAAWC,KAAtBF,OAHiB,EAIeG,oBAAS,GAJxB,mBAIlBC,EAJkB,KAIJC,EAJI,OAKuBF,mBAAS,MALhC,mBAKlBG,EALkB,KAKAC,EALA,OAOgBC,YAAYC,IAAc,CACjEC,YAAa,WACXC,YAA2B,8CAE7BC,QAAS,WACPjB,YACE,6EAbmB,mBAOlBkB,EAPkB,YAOHC,EAPG,EAOHA,QAASC,EAPN,EAOMA,KAgE/B,IAAKf,EAAOgB,KAAOhB,EAAOiB,UACxB,OACE,kBAACnC,EAAD,KACE,kBAAC,IAAD,CAAWoC,UAAU,mBACnB,yBAAKA,UAAU,qBACb,kBAAC/B,EAAD,CAAOgC,MAAO,EAAGD,UAAU,oBAA3B,4EAIA,kBAAChC,EAAD,CAAMM,KAAK,aAAX,sIAGE,kBAAC,IAAD,CAAM4B,GAAG,UAAT,UAHF,mDAYV,GAAIN,EACF,OACE,kBAAC7B,EAAD,CAASiC,UAAU,gBACjB,kBAAC,IAAD,CAAaG,QAAQ,qDAK3B,GAAIN,GAAQA,EAAKF,YACf,OAAO,kBAAC,IAAD,CAAUO,GAAE,mBAAcL,EAAKF,YAAYG,MArG3B,IAwGjBM,EAAsBvB,EAAtBuB,kBAER,OACE,kBAACxC,EAAD,KACE,uBAAMyC,OAAO,WAAWC,SAlEF,SAACC,GACzBA,EAAIC,iBAEJ3B,EAAK4B,gBAAe,SAACC,EAAKC,GACxB,GAAID,EACFjC,YAAoB,iDADtB,CAKA,IAAMmC,EAAW,UAAMD,EAAOE,QAAb,aAAyBF,EAAOG,KAAhC,aAAyCH,EAAOI,MAAhD,aAA0DJ,EAAOK,YAE5EC,EAAK,eACNN,EADM,CAETE,QAASD,EACTM,MAAO9B,EACP+B,MAAsB,IAAfR,EAAOQ,eAETF,EAAMH,YACNG,EAAMF,aACNE,EAAMD,WAEbrB,EAAY,CACVyB,UAAW,CACTH,iBA4CF,6BACE,kBAAChD,EAAD,CAAOgC,MAAO,EAAGD,UAAU,oBAA3B,6CAGA,kBAAChC,EAAD,CAAMM,KAAK,aAAX,0FAMF,kBAACJ,EAAD,CAAMmD,MAAM,mBACTjB,EAAkB,SAAU,CAC3BkB,MAAO,CACL,CACEC,UAAU,EACVpB,QAAS,0CAJdC,CAOE,uBAAaoB,IAAK,EAAGC,YAAY,QAGtC,kBAACvD,EAAD,CAAMmD,MAAM,QAAQK,MAAM,6BACvBtB,EAAkB,QAAS,CAC1BkB,MAAO,CACL,CACEC,UAAU,EACVpB,QAAS,4CAJdC,CAQC,uBACEuB,UAAW,GACXF,YAAY,+CAKlB,kBAACvD,EAAD,CAAMmD,MAAM,yBAAyBK,MAAM,8BACxCtB,EAAkB,cAAe,CAChCkB,MAAO,CACL,CACEC,UAAU,EACVpB,QAAS,kDAJdC,CAQC,sBAAOwB,SAAP,CACEC,KAAM,EACNF,UAAW,IACXF,YAAY,yGAKlB,kBAACvD,EAAD,CAAMmD,MAAM,WACTjB,EAAkB,UAAW,CAC5BkB,MAAO,CACL,CACEC,UAAU,EACVpB,QAAS,8CAJdC,CAOE,uBAAOqB,YAAY,+BAGxB,kBAACvD,EAAD,CAAMmD,MAAM,aACTjB,EAAkB,OAAQ,CACzBkB,MAAO,CACL,CACEC,UAAU,EACVpB,QAAS,uDAJdC,CAOE,uBAAOqB,YAAY,kBAGxB,kBAACvD,EAAD,CAAMmD,MAAM,kBACTjB,EAAkB,QAAS,CAC1BkB,MAAO,CACL,CACEC,UAAU,EACVpB,QAAS,0DAJdC,CAOE,uBAAOqB,YAAY,iBAGxB,kBAACvD,EAAD,CAAMmD,MAAM,mBACTjB,EAAkB,aAAc,CAC/BkB,MAAO,CACL,CACEC,UAAU,EACVpB,QACE,2DALPC,CAQE,uBAAOqB,YAAY,gDAGxB,kBAACvD,EAAD,CACEmD,MAAM,QACNK,MAAM,8DAEN,yBAAK1B,UAAU,2BACZI,EAAkB,QAAS,CAC1BkB,MAAO,CACL,CACEC,UAAU,EACVpB,QAAS,qDAJdC,CAQC,uBACExB,KAAK,QACLkD,SAAS,eACTC,gBAAgB,EAChBC,OAAO,mDACPC,aAAc9D,EACd+D,SAzMY,SAACC,GAAU,IAC3B/D,EAAS+D,EAAT/D,KAEY,cAAhBA,EAAKgE,OAKW,SAAhBhE,EAAKgE,QAAqBhE,EAAKiE,eAhBd,SAACC,EAAKC,GAC3B,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcJ,GACrBE,EAAOG,OAAS,WACdJ,EAASC,EAAOI,SAahBC,CAAezE,EAAKiE,eAAe,SAACjD,GAClCC,EAAoBD,GACpBD,GAAgB,MAPlBA,GAAgB,KAuMLC,EACC,yBAAK0D,IAAK1D,EAAkB2D,IAAI,YAEhC,6BACE,uBAAMzE,KAAMY,EAAe,UAAY,SACvC,yBAAKc,UAAU,mBAAf,eAQZ,kBAAC9B,EAAD,CAAMmD,MAAM,QAAQK,MAAM,0BACvBtB,EAAkB,QAAS,CAC1BkB,MAAO,CACL,CACEC,UAAU,EACVpB,QAAS,4CAJdC,CAOE,uBAAaoB,IAAK,EAAGC,YAAY,UAGtC,kBAACvD,EAAD,CAAMmD,MAAM,QACTjB,EAAkB,OAAQ,CACzBkB,MAAO,CACL,CACEC,UAAU,EACVpB,QAAS,qCAJdC,CAQC,sBAAO4C,MAAP,KACE,sBAAOC,OAAP,CAAcC,OAAO,GACnB,4CAEF,sBAAOD,OAAP,CAAcC,OAAO,GACnB,0CAKR,kBAAChF,EAAD,CAAMmD,MAAM,WACTjB,EAAkB,UAAW,CAC5BkB,MAAO,CACL,CACEC,UAAU,EACVpB,QAAS,wCAJdC,CAQC,sBAAO4C,MAAP,KACE,sBAAOC,OAAP,CAAcC,OAAO,GACnB,4CAEF,sBAAOD,OAAP,CAAcC,OAAO,GACnB,0CAKR,kBAAChF,EAAD,CAAMmD,MAAM,QACTjB,EAAkB,OAAQ,CACzBkB,MAAO,CACL,CACEC,UAAU,EACVpB,QAAS,qCAJdC,CAQC,sBAAO4C,MAAP,KACE,sBAAOC,OAAP,CAAcC,OAAO,GACnB,4CAEF,sBAAOD,OAAP,CAAcC,OAAO,GACnB,0CAKR,kBAAChF,EAAD,CAAMmD,MAAM,mBACTjB,EAAkB,SAAU,CAC3BkB,MAAO,CACL,CACEC,UAAU,EACVpB,QAAS,gDAJdC,CAQC,sBAAO4C,MAAP,KACE,sBAAOC,OAAP,CAAcC,OAAO,GACnB,4CAEF,sBAAOD,OAAP,CAAcC,OAAO,GACnB,0CAMR,kBAAChF,EAAD,KACE,uBAAQI,KAAK,UAAU6E,SAAS,UAAhC,gBAiCKzE","file":"static/js/12.cbbcd8a5.chunk.js","sourcesContent":["import { useLayoutEffect } from 'react';\n\nconst useScrollToTop = () => {\n  useLayoutEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n};\n\nexport default useScrollToTop;\n","import styled from 'styled-components';\n\nexport const FormContent = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 40px 40px;\n  max-width: 1100px;\n  margin: 0 auto;\n\n  .host__container {\n    margin-top: 60px;\n  }\n`;\n\nexport const FormHeader = styled.div`\n  padding-bottom: 20px;\n`;\n\nexport const FormImageUpload = styled.div`\n  width: 125px;\n`;\n","import React, { useState, useContext } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport { useMutation } from '@apollo/react-hooks';\nimport {\n  Button,\n  Form,\n  Icon,\n  Input,\n  InputNumber,\n  Layout,\n  Radio,\n  Typography,\n  Upload,\n} from 'antd';\nimport { Container, LoadingSpin } from 'lib/components';\nimport { FormContent } from './Host.style';\nimport { HOST_LISTING } from '../../lib/graphql/mutations';\nimport { displayErrorMessage, displaySuccessNotification } from 'lib/utils';\nimport { AuthContext } from 'lib/context/AuthProvider';\nimport useScrollToTop from 'lib/hooks/useScrollToTop';\n\nconst { Content } = Layout;\nconst { Text, Title } = Typography;\nconst { Item } = Form;\n\nconst Host = ({ form }) => {\n  useScrollToTop();\n\n  const { viewer } = useContext(AuthContext);\n  const [imageLoading, setImageLoading] = useState(false);\n  const [imageBase64Value, setImageBase64Value] = useState(null);\n\n  const [hostListing, { loading, data }] = useMutation(HOST_LISTING, {\n    onCompleted: () => {\n      displaySuccessNotification(\"You've successfully created your listing!\");\n    },\n    onError: () => {\n      displayErrorMessage(\n        \"Sorry! We weren't able to create your listing. Please try again later.\"\n      );\n    },\n  });\n\n  const getBase64Value = (img, callback) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(img);\n    reader.onload = () => {\n      callback(reader.result);\n    };\n  };\n\n  const handleImageUpload = (info) => {\n    const { file } = info;\n\n    if (file.status === 'uploading') {\n      setImageLoading(true);\n      return;\n    }\n\n    if (file.status === 'done' && file.originFileObj) {\n      getBase64Value(file.originFileObj, (imageBase64Value) => {\n        setImageBase64Value(imageBase64Value);\n        setImageLoading(false);\n      });\n    }\n  };\n\n  const handleHostListing = (evt) => {\n    evt.preventDefault();\n\n    form.validateFields((err, values) => {\n      if (err) {\n        displayErrorMessage('Please complete all required form fields!');\n        return;\n      }\n\n      const fullAddress = `${values.address}, ${values.city}, ${values.state}, ${values.postalCode}`;\n\n      const input = {\n        ...values,\n        address: fullAddress,\n        image: imageBase64Value,\n        price: values.price * 100,\n      };\n      delete input.city;\n      delete input.state;\n      delete input.postalCode;\n\n      hostListing({\n        variables: {\n          input,\n        },\n      });\n    });\n  };\n\n  if (!viewer.id || !viewer.hasWallet) {\n    return (\n      <FormContent>\n        <Container className='host__container'>\n          <div className='host__form-header'>\n            <Title level={4} className='host__form-title'>\n              You'll have to be signed in and connected with Stripe to host a\n              listing!\n            </Title>\n            <Text type='secondary'>\n              We only allow users who've signed in to our application and have\n              connected with Stripe to host new listings. You can sign in at the\n              <Link to='/login'>/login</Link> page and connect with Stripe\n              shortly after.\n            </Text>\n          </div>\n        </Container>\n      </FormContent>\n    );\n  }\n\n  if (loading) {\n    return (\n      <Content className='host-content'>\n        <LoadingSpin message=\"Please Wait! We're creating your listing now...\" />\n      </Content>\n    );\n  }\n\n  if (data && data.hostListing) {\n    return <Redirect to={`/listing/${data.hostListing.id}`} />;\n  }\n\n  const { getFieldDecorator } = form;\n\n  return (\n    <FormContent>\n      <Form layout='vertical' onSubmit={handleHostListing}>\n        <div>\n          <Title level={3} className='host__form-title'>\n            Hi! Let's get started listing your place.\n          </Title>\n          <Text type='secondary'>\n            In this form, we'll collect some basic and additional information\n            about your listing.\n          </Text>\n        </div>\n\n        <Item label='Max # of Guests'>\n          {getFieldDecorator('guests', {\n            rules: [\n              {\n                required: true,\n                message: 'Please enter a max number of guests!',\n              },\n            ],\n          })(<InputNumber min={1} placeholder='4' />)}\n        </Item>\n\n        <Item label='Title' extra='Max character count of 45'>\n          {getFieldDecorator('title', {\n            rules: [\n              {\n                required: true,\n                message: 'Please enter a title for your listing!',\n              },\n            ],\n          })(\n            <Input\n              maxLength={45}\n              placeholder='The iconic and luxurious Bel-Air mansion'\n            />\n          )}\n        </Item>\n\n        <Item label='Description of listing' extra='Max character count of 400'>\n          {getFieldDecorator('description', {\n            rules: [\n              {\n                required: true,\n                message: 'Please enter a description for your listing!',\n              },\n            ],\n          })(\n            <Input.TextArea\n              rows={3}\n              maxLength={400}\n              placeholder='Modern, clean, and iconic home of the Fresh Prince. Situated in the heart of Bel-Air, Los Angeles.'\n            />\n          )}\n        </Item>\n\n        <Item label='Address'>\n          {getFieldDecorator('address', {\n            rules: [\n              {\n                required: true,\n                message: 'Please enter a address for your listing!',\n              },\n            ],\n          })(<Input placeholder='251 North Bristol Avenue' />)}\n        </Item>\n\n        <Item label='City/Town'>\n          {getFieldDecorator('city', {\n            rules: [\n              {\n                required: true,\n                message: 'Please enter a city (or region) for your listing!',\n              },\n            ],\n          })(<Input placeholder='Los Angeles' />)}\n        </Item>\n\n        <Item label='State/Province'>\n          {getFieldDecorator('state', {\n            rules: [\n              {\n                required: true,\n                message: 'Please enter a state (or province) for your listing!',\n              },\n            ],\n          })(<Input placeholder='California' />)}\n        </Item>\n\n        <Item label='Zip/Postal Code'>\n          {getFieldDecorator('postalCode', {\n            rules: [\n              {\n                required: true,\n                message:\n                  'Please enter a zip (or postal) code for your listing!',\n              },\n            ],\n          })(<Input placeholder='Please enter a zip code for your listing!' />)}\n        </Item>\n\n        <Item\n          label='Image'\n          extra='Images have to be under 1MB in size and of type JPG or PNG'\n        >\n          <div className='host__form-image-upload'>\n            {getFieldDecorator('image', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please enter provide an image for your listing!',\n                },\n              ],\n            })(\n              <Upload\n                name='image'\n                listType='picture-card'\n                showUploadList={false}\n                action='https://www.mocky.io/v2/5cc8019d300000980a055e76'\n                beforeUpload={beforeImageUpload}\n                onChange={handleImageUpload}\n              >\n                {imageBase64Value ? (\n                  <img src={imageBase64Value} alt='Listing' />\n                ) : (\n                  <div>\n                    <Icon type={imageLoading ? 'loading' : 'plus'} />\n                    <div className='ant-upload-text'>Upload</div>\n                  </div>\n                )}\n              </Upload>\n            )}\n          </div>\n        </Item>\n\n        <Item label='Price' extra='All prices in $USD/day'>\n          {getFieldDecorator('price', {\n            rules: [\n              {\n                required: true,\n                message: 'Please enter a price for your listing!',\n              },\n            ],\n          })(<InputNumber min={0} placeholder='120' />)}\n        </Item>\n\n        <Item label='Wifi'>\n          {getFieldDecorator('wifi', {\n            rules: [\n              {\n                required: true,\n                message: 'Please select Wifi Availablity!',\n              },\n            ],\n          })(\n            <Radio.Group>\n              <Radio.Button value={true}>\n                <span>Available</span>\n              </Radio.Button>\n              <Radio.Button value={false}>\n                <span>None</span>\n              </Radio.Button>\n            </Radio.Group>\n          )}\n        </Item>\n        <Item label='Parking'>\n          {getFieldDecorator('parking', {\n            rules: [\n              {\n                required: true,\n                message: 'Please select Parking Availablity!',\n              },\n            ],\n          })(\n            <Radio.Group>\n              <Radio.Button value={true}>\n                <span>Available</span>\n              </Radio.Button>\n              <Radio.Button value={false}>\n                <span>None</span>\n              </Radio.Button>\n            </Radio.Group>\n          )}\n        </Item>\n        <Item label='Pool'>\n          {getFieldDecorator('pool', {\n            rules: [\n              {\n                required: true,\n                message: 'Please select Pool Availablity!',\n              },\n            ],\n          })(\n            <Radio.Group>\n              <Radio.Button value={true}>\n                <span>Available</span>\n              </Radio.Button>\n              <Radio.Button value={false}>\n                <span>None</span>\n              </Radio.Button>\n            </Radio.Group>\n          )}\n        </Item>\n        <Item label='Air Conditioner'>\n          {getFieldDecorator('airCon', {\n            rules: [\n              {\n                required: true,\n                message: 'Please select Air Conditioner Availablity!',\n              },\n            ],\n          })(\n            <Radio.Group>\n              <Radio.Button value={true}>\n                <span>Available</span>\n              </Radio.Button>\n              <Radio.Button value={false}>\n                <span>None</span>\n              </Radio.Button>\n            </Radio.Group>\n          )}\n        </Item>\n\n        <Item>\n          <Button type='primary' htmlType='submit'>\n            Submit\n          </Button>\n        </Item>\n      </Form>\n    </FormContent>\n  );\n};\n\nconst beforeImageUpload = (file) => {\n  const fileIsValidImage =\n    file.type === 'image/jpeg' || file.type === 'image/png';\n  const fileIsValidSize = file.size / 1024 / 1024 < 1;\n\n  if (!fileIsValidImage) {\n    displayErrorMessage(\"You're only able to upload valid JPG or PNG files!\");\n    return false;\n  }\n\n  if (!fileIsValidSize) {\n    displayErrorMessage(\n      \"You're only able to upload valid image files of under 1MB in size!\"\n    );\n    return false;\n  }\n\n  return fileIsValidImage && fileIsValidSize;\n};\n\nconst WrappedHost = Form.create({\n  name: 'host_form',\n})(Host);\n\nexport default WrappedHost;\n"],"sourceRoot":""}